{"version":3,"file":"static/js/268.77ec56f5.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import React from 'react';\nimport { Hearts } from 'react-loader-spinner';\nimport { Box } from '@mui/material';\nfunction Loader() {\n  return (\n    // <Dna\n    //   sx={{margin: '0 auto',}}\n    //   visible={true}\n    //   height=\"200\"\n    //   width=\"200\"\n    //   ariaLabel=\"dna-loading\"\n    //   wrapperStyle={{}}\n    //   wrapperClass=\"dna-wrapper\"\n    // />\n\n    // If the color is better orange sub this for the green:  \"var(--accent-bright-color)\"\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      minHeight=\"calc(100vh / 6)\" // Set the minHeight to 1/6th of the viewport height\n    >\n      <Hearts\n        height=\"200\"\n        width=\"200\"\n        color=\"#4fa94d\"\n        ariaLabel=\"hearts-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n      />\n    </Box>\n  );\n}\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"form_container\":\"LoginForm_form_container__A+e3j\",\"form\":\"LoginForm_form__gPEx5\",\"h2\":\"LoginForm_h2__dNyJA\",\"input\":\"LoginForm_input__aQRtt\",\"button_container\":\"LoginForm_button_container__0rjB8\",\"login_button\":\"LoginForm_login_button__dAQX-\",\"register_button\":\"LoginForm_register_button__hjQGg\"};","import React from 'react';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { Button, TextField } from '@mui/material';\nimport { logIn } from '../../redux/auth/authOperations';\nimport css from './LoginForm.module.css';\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Invalid email address')\n    .required('Email is required'),\n  password: Yup.string().required('Password is required'),\n});\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const handleSubmit = (e, values) => {\n    e.preventDefault();\n    console.log(values); // Form values\n    dispatch(logIn(values));\n  };\n\n  const handleRegisterClick = () => {\n    navigate('/register');\n  };\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ values, handleChange, handleBlur, errors, touched }) => (\n        <Form className={css.form} autoComplete=\"off\">\n          <h2 className={css.h2}>Log In</h2>\n          <TextField\n            id=\"email\"\n            name=\"email\"\n            label=\"Email\"\n            variant=\"standard\"\n            placeholder=\"Email\"\n            className={css.input}\n            type=\"email\"\n            color=\"warning\"\n            value={values.email}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            error={touched.email && !!errors.email}\n            helperText={touched.email && errors.email}\n            required\n          />\n          <TextField\n            id=\"password\"\n            name=\"password\"\n            label=\"Password\"\n            variant=\"standard\"\n            placeholder=\"Password\"\n            className={css.input}\n            type=\"password\"\n            color=\"warning\"\n            value={values.password}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            error={touched.password && !!errors.password}\n            helperText={touched.password && errors.password}\n            required\n          />\n          <div className={css.button_container}>\n            <Button\n              variant=\"contained\"\n              color=\"warning\"\n              type=\"submit\"\n              size=\"small\"\n              sx={{\n                borderRadius: '30px',\n                textTransform: 'capitalize',\n                padding: '6px 40px',\n                letterSpacing: '1px',\n                fontWeight: 'bold',\n                fontSize: '18px',\n              }}\n              onClick={e => handleSubmit(e, values)}\n            >\n              Log In\n            </Button>\n            <Button\n              variant=\"outlined\"\n              color=\"warning\"\n              type=\"button\"\n              size=\"small\"\n              sx={{\n                borderRadius: '30px',\n                textTransform: 'capitalize',\n                padding: '6px 40px',\n                letterSpacing: '1px',\n                fontWeight: 'bold',\n                fontSize: '18px',\n              }}\n              onClick={handleRegisterClick}\n            >\n              Register\n            </Button>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\nimport Loader from 'components/Loader/Loader';\n\nconst LoginPage = () => {\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n      <Loader />\n    </HelmetProvider>\n  );\n};\n\nexport default LoginPage;\n"],"names":["_jsx","Box","display","justifyContent","alignItems","minHeight","children","Hearts","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","validationSchema","Yup","shape","email","required","password","LoginForm","dispatch","useDispatch","navigate","useNavigate","handleSubmit","e","values","preventDefault","console","log","logIn","handleRegisterClick","Formik","initialValues","onSubmit","_ref","handleChange","handleBlur","errors","touched","_jsxs","Form","className","css","autoComplete","TextField","id","name","label","variant","placeholder","type","value","onChange","onBlur","error","helperText","Button","size","sx","borderRadius","textTransform","padding","letterSpacing","fontWeight","fontSize","onClick","HelmetProvider","Helmet","Loader"],"sourceRoot":""}